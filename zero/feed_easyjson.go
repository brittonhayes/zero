// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package zero

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD77e0694DecodeGithubComBrittonhayesZeroZero(in *jlexer.Lexer, out *Provider) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "depth":
			out.Depth = int(in.Int())
		case "pattern":
			out.Pattern = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD77e0694EncodeGithubComBrittonhayesZeroZero(out *jwriter.Writer, in Provider) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"depth\":"
		out.RawString(prefix)
		out.Int(int(in.Depth))
	}
	{
		const prefix string = ",\"pattern\":"
		out.RawString(prefix)
		out.String(string(in.Pattern))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Provider) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD77e0694EncodeGithubComBrittonhayesZeroZero(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Provider) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD77e0694EncodeGithubComBrittonhayesZeroZero(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Provider) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD77e0694DecodeGithubComBrittonhayesZeroZero(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Provider) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD77e0694DecodeGithubComBrittonhayesZeroZero(l, v)
}
func easyjsonD77e0694DecodeGithubComBrittonhayesZeroZero1(in *jlexer.Lexer, out *Global) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Patterns":
			if in.IsNull() {
				in.Skip()
				out.Patterns = nil
			} else {
				in.Delim('[')
				if out.Patterns == nil {
					if !in.IsDelim(']') {
						out.Patterns = make([]string, 0, 4)
					} else {
						out.Patterns = []string{}
					}
				} else {
					out.Patterns = (out.Patterns)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Patterns = append(out.Patterns, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD77e0694EncodeGithubComBrittonhayesZeroZero1(out *jwriter.Writer, in Global) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Patterns\":"
		out.RawString(prefix[1:])
		if in.Patterns == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Patterns {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Global) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD77e0694EncodeGithubComBrittonhayesZeroZero1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Global) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD77e0694EncodeGithubComBrittonhayesZeroZero1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Global) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD77e0694DecodeGithubComBrittonhayesZeroZero1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Global) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD77e0694DecodeGithubComBrittonhayesZeroZero1(l, v)
}
func easyjsonD77e0694DecodeGithubComBrittonhayesZeroZero2(in *jlexer.Lexer, out *Config) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Global":
			(out.Global).UnmarshalEasyJSON(in)
		case "Items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]Provider, 0, 1)
					} else {
						out.Items = []Provider{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Provider
					(v4).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD77e0694EncodeGithubComBrittonhayesZeroZero2(out *jwriter.Writer, in Config) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Global\":"
		out.RawString(prefix[1:])
		(in.Global).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Items {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (c Config) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD77e0694EncodeGithubComBrittonhayesZeroZero2(&w, c)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (c Config) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD77e0694EncodeGithubComBrittonhayesZeroZero2(w, c)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (c *Config) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD77e0694DecodeGithubComBrittonhayesZeroZero2(&r, c)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (c *Config) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD77e0694DecodeGithubComBrittonhayesZeroZero2(l, c)
}
