// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package zero

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	gofeed "github.com/mmcdole/gofeed"
	extensions "github.com/mmcdole/gofeed/extensions"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEea530c9DecodeGithubComBrittonhayesZeroZero(in *jlexer.Lexer, out *Matches) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Matches, 0, 2)
			} else {
				*out = Matches{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Match
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEea530c9EncodeGithubComBrittonhayesZeroZero(out *jwriter.Writer, in Matches) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Matches) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEea530c9EncodeGithubComBrittonhayesZeroZero(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Matches) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEea530c9EncodeGithubComBrittonhayesZeroZero(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Matches) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEea530c9DecodeGithubComBrittonhayesZeroZero(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Matches) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEea530c9DecodeGithubComBrittonhayesZeroZero(l, v)
}
func easyjsonEea530c9DecodeGithubComBrittonhayesZeroZero1(in *jlexer.Lexer, out *Match) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "provider":
			if in.IsNull() {
				in.Skip()
				out.Provider = nil
			} else {
				if out.Provider == nil {
					out.Provider = new(Provider)
				}
				(*out.Provider).UnmarshalEasyJSON(in)
			}
		case "item":
			if in.IsNull() {
				in.Skip()
				out.Item = nil
			} else {
				if out.Item == nil {
					out.Item = new(gofeed.Item)
				}
				easyjsonEea530c9DecodeGithubComMmcdoleGofeed(in, out.Item)
			}
		case "raw_match":
			out.RawMatch = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEea530c9EncodeGithubComBrittonhayesZeroZero1(out *jwriter.Writer, in Match) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"provider\":"
		out.RawString(prefix[1:])
		if in.Provider == nil {
			out.RawString("null")
		} else {
			(*in.Provider).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"item\":"
		out.RawString(prefix)
		if in.Item == nil {
			out.RawString("null")
		} else {
			easyjsonEea530c9EncodeGithubComMmcdoleGofeed(out, *in.Item)
		}
	}
	{
		const prefix string = ",\"raw_match\":"
		out.RawString(prefix)
		out.String(string(in.RawMatch))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Match) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEea530c9EncodeGithubComBrittonhayesZeroZero1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Match) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEea530c9EncodeGithubComBrittonhayesZeroZero1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Match) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEea530c9DecodeGithubComBrittonhayesZeroZero1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Match) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEea530c9DecodeGithubComBrittonhayesZeroZero1(l, v)
}
func easyjsonEea530c9DecodeGithubComMmcdoleGofeed(in *jlexer.Lexer, out *gofeed.Item) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "content":
			out.Content = string(in.String())
		case "link":
			out.Link = string(in.String())
		case "updated":
			out.Updated = string(in.String())
		case "updatedParsed":
			if in.IsNull() {
				in.Skip()
				out.UpdatedParsed = nil
			} else {
				if out.UpdatedParsed == nil {
					out.UpdatedParsed = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UpdatedParsed).UnmarshalJSON(data))
				}
			}
		case "published":
			out.Published = string(in.String())
		case "publishedParsed":
			if in.IsNull() {
				in.Skip()
				out.PublishedParsed = nil
			} else {
				if out.PublishedParsed == nil {
					out.PublishedParsed = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.PublishedParsed).UnmarshalJSON(data))
				}
			}
		case "author":
			if in.IsNull() {
				in.Skip()
				out.Author = nil
			} else {
				if out.Author == nil {
					out.Author = new(gofeed.Person)
				}
				easyjsonEea530c9DecodeGithubComMmcdoleGofeed1(in, out.Author)
			}
		case "guid":
			out.GUID = string(in.String())
		case "image":
			if in.IsNull() {
				in.Skip()
				out.Image = nil
			} else {
				if out.Image == nil {
					out.Image = new(gofeed.Image)
				}
				easyjsonEea530c9DecodeGithubComMmcdoleGofeed2(in, out.Image)
			}
		case "categories":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]string, 0, 4)
					} else {
						out.Categories = []string{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Categories = append(out.Categories, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "enclosures":
			if in.IsNull() {
				in.Skip()
				out.Enclosures = nil
			} else {
				in.Delim('[')
				if out.Enclosures == nil {
					if !in.IsDelim(']') {
						out.Enclosures = make([]*gofeed.Enclosure, 0, 8)
					} else {
						out.Enclosures = []*gofeed.Enclosure{}
					}
				} else {
					out.Enclosures = (out.Enclosures)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *gofeed.Enclosure
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(gofeed.Enclosure)
						}
						easyjsonEea530c9DecodeGithubComMmcdoleGofeed3(in, v5)
					}
					out.Enclosures = append(out.Enclosures, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "dcExt":
			if in.IsNull() {
				in.Skip()
				out.DublinCoreExt = nil
			} else {
				if out.DublinCoreExt == nil {
					out.DublinCoreExt = new(extensions.DublinCoreExtension)
				}
				easyjsonEea530c9DecodeGithubComMmcdoleGofeedExtensions(in, out.DublinCoreExt)
			}
		case "itunesExt":
			if in.IsNull() {
				in.Skip()
				out.ITunesExt = nil
			} else {
				if out.ITunesExt == nil {
					out.ITunesExt = new(extensions.ITunesItemExtension)
				}
				easyjsonEea530c9DecodeGithubComMmcdoleGofeedExtensions1(in, out.ITunesExt)
			}
		case "extensions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Extensions = make(extensions.Extensions)
				} else {
					out.Extensions = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 map[string][]extensions.Extension
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v6 = make(map[string][]extensions.Extension)
						} else {
							v6 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v7 []extensions.Extension
							if in.IsNull() {
								in.Skip()
								v7 = nil
							} else {
								in.Delim('[')
								if v7 == nil {
									if !in.IsDelim(']') {
										v7 = make([]extensions.Extension, 0, 1)
									} else {
										v7 = []extensions.Extension{}
									}
								} else {
									v7 = (v7)[:0]
								}
								for !in.IsDelim(']') {
									var v8 extensions.Extension
									easyjsonEea530c9DecodeGithubComMmcdoleGofeedExtensions2(in, &v8)
									v7 = append(v7, v8)
									in.WantComma()
								}
								in.Delim(']')
							}
							(v6)[key] = v7
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.Extensions)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "custom":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Custom = make(map[string]string)
				} else {
					out.Custom = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 string
					v9 = string(in.String())
					(out.Custom)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEea530c9EncodeGithubComMmcdoleGofeed(out *jwriter.Writer, in gofeed.Item) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Title != "" {
		const prefix string = ",\"title\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Content != "" {
		const prefix string = ",\"content\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Content))
	}
	if in.Link != "" {
		const prefix string = ",\"link\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Link))
	}
	if in.Updated != "" {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Updated))
	}
	if in.UpdatedParsed != nil {
		const prefix string = ",\"updatedParsed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.UpdatedParsed).MarshalJSON())
	}
	if in.Published != "" {
		const prefix string = ",\"published\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Published))
	}
	if in.PublishedParsed != nil {
		const prefix string = ",\"publishedParsed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.PublishedParsed).MarshalJSON())
	}
	if in.Author != nil {
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonEea530c9EncodeGithubComMmcdoleGofeed1(out, *in.Author)
	}
	if in.GUID != "" {
		const prefix string = ",\"guid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GUID))
	}
	if in.Image != nil {
		const prefix string = ",\"image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonEea530c9EncodeGithubComMmcdoleGofeed2(out, *in.Image)
	}
	if len(in.Categories) != 0 {
		const prefix string = ",\"categories\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.Categories {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	if len(in.Enclosures) != 0 {
		const prefix string = ",\"enclosures\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.Enclosures {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil {
					out.RawString("null")
				} else {
					easyjsonEea530c9EncodeGithubComMmcdoleGofeed3(out, *v13)
				}
			}
			out.RawByte(']')
		}
	}
	if in.DublinCoreExt != nil {
		const prefix string = ",\"dcExt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonEea530c9EncodeGithubComMmcdoleGofeedExtensions(out, *in.DublinCoreExt)
	}
	if in.ITunesExt != nil {
		const prefix string = ",\"itunesExt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonEea530c9EncodeGithubComMmcdoleGofeedExtensions1(out, *in.ITunesExt)
	}
	if len(in.Extensions) != 0 {
		const prefix string = ",\"extensions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v14First := true
			for v14Name, v14Value := range in.Extensions {
				if v14First {
					v14First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v14Name))
				out.RawByte(':')
				if v14Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v15First := true
					for v15Name, v15Value := range v14Value {
						if v15First {
							v15First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v15Name))
						out.RawByte(':')
						if v15Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
							out.RawString("null")
						} else {
							out.RawByte('[')
							for v16, v17 := range v15Value {
								if v16 > 0 {
									out.RawByte(',')
								}
								easyjsonEea530c9EncodeGithubComMmcdoleGofeedExtensions2(out, v17)
							}
							out.RawByte(']')
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Custom) != 0 {
		const prefix string = ",\"custom\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.Custom {
				if v18First {
					v18First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v18Name))
				out.RawByte(':')
				out.String(string(v18Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjsonEea530c9DecodeGithubComMmcdoleGofeedExtensions2(in *jlexer.Lexer, out *extensions.Extension) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "attrs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Attrs = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v19 string
					v19 = string(in.String())
					(out.Attrs)[key] = v19
					in.WantComma()
				}
				in.Delim('}')
			}
		case "children":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Children = make(map[string][]extensions.Extension)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v20 []extensions.Extension
					if in.IsNull() {
						in.Skip()
						v20 = nil
					} else {
						in.Delim('[')
						if v20 == nil {
							if !in.IsDelim(']') {
								v20 = make([]extensions.Extension, 0, 1)
							} else {
								v20 = []extensions.Extension{}
							}
						} else {
							v20 = (v20)[:0]
						}
						for !in.IsDelim(']') {
							var v21 extensions.Extension
							easyjsonEea530c9DecodeGithubComMmcdoleGofeedExtensions2(in, &v21)
							v20 = append(v20, v21)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Children)[key] = v20
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEea530c9EncodeGithubComMmcdoleGofeedExtensions2(out *jwriter.Writer, in extensions.Extension) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"attrs\":"
		out.RawString(prefix)
		if in.Attrs == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v22First := true
			for v22Name, v22Value := range in.Attrs {
				if v22First {
					v22First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v22Name))
				out.RawByte(':')
				out.String(string(v22Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"children\":"
		out.RawString(prefix)
		if in.Children == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v23First := true
			for v23Name, v23Value := range in.Children {
				if v23First {
					v23First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v23Name))
				out.RawByte(':')
				if v23Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v24, v25 := range v23Value {
						if v24 > 0 {
							out.RawByte(',')
						}
						easyjsonEea530c9EncodeGithubComMmcdoleGofeedExtensions2(out, v25)
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjsonEea530c9DecodeGithubComMmcdoleGofeedExtensions1(in *jlexer.Lexer, out *extensions.ITunesItemExtension) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "author":
			out.Author = string(in.String())
		case "block":
			out.Block = string(in.String())
		case "duration":
			out.Duration = string(in.String())
		case "explicit":
			out.Explicit = string(in.String())
		case "keywords":
			out.Keywords = string(in.String())
		case "subtitle":
			out.Subtitle = string(in.String())
		case "summary":
			out.Summary = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "isClosedCaptioned":
			out.IsClosedCaptioned = string(in.String())
		case "episode":
			out.Episode = string(in.String())
		case "season":
			out.Season = string(in.String())
		case "order":
			out.Order = string(in.String())
		case "episodeType":
			out.EpisodeType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEea530c9EncodeGithubComMmcdoleGofeedExtensions1(out *jwriter.Writer, in extensions.ITunesItemExtension) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Author != "" {
		const prefix string = ",\"author\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Author))
	}
	if in.Block != "" {
		const prefix string = ",\"block\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Block))
	}
	if in.Duration != "" {
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Duration))
	}
	if in.Explicit != "" {
		const prefix string = ",\"explicit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Explicit))
	}
	if in.Keywords != "" {
		const prefix string = ",\"keywords\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Keywords))
	}
	if in.Subtitle != "" {
		const prefix string = ",\"subtitle\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Subtitle))
	}
	if in.Summary != "" {
		const prefix string = ",\"summary\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Summary))
	}
	if in.Image != "" {
		const prefix string = ",\"image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Image))
	}
	if in.IsClosedCaptioned != "" {
		const prefix string = ",\"isClosedCaptioned\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IsClosedCaptioned))
	}
	if in.Episode != "" {
		const prefix string = ",\"episode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Episode))
	}
	if in.Season != "" {
		const prefix string = ",\"season\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Season))
	}
	if in.Order != "" {
		const prefix string = ",\"order\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Order))
	}
	if in.EpisodeType != "" {
		const prefix string = ",\"episodeType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EpisodeType))
	}
	out.RawByte('}')
}
func easyjsonEea530c9DecodeGithubComMmcdoleGofeedExtensions(in *jlexer.Lexer, out *extensions.DublinCoreExtension) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				in.Delim('[')
				if out.Title == nil {
					if !in.IsDelim(']') {
						out.Title = make([]string, 0, 4)
					} else {
						out.Title = []string{}
					}
				} else {
					out.Title = (out.Title)[:0]
				}
				for !in.IsDelim(']') {
					var v26 string
					v26 = string(in.String())
					out.Title = append(out.Title, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "creator":
			if in.IsNull() {
				in.Skip()
				out.Creator = nil
			} else {
				in.Delim('[')
				if out.Creator == nil {
					if !in.IsDelim(']') {
						out.Creator = make([]string, 0, 4)
					} else {
						out.Creator = []string{}
					}
				} else {
					out.Creator = (out.Creator)[:0]
				}
				for !in.IsDelim(']') {
					var v27 string
					v27 = string(in.String())
					out.Creator = append(out.Creator, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "author":
			if in.IsNull() {
				in.Skip()
				out.Author = nil
			} else {
				in.Delim('[')
				if out.Author == nil {
					if !in.IsDelim(']') {
						out.Author = make([]string, 0, 4)
					} else {
						out.Author = []string{}
					}
				} else {
					out.Author = (out.Author)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.Author = append(out.Author, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "subject":
			if in.IsNull() {
				in.Skip()
				out.Subject = nil
			} else {
				in.Delim('[')
				if out.Subject == nil {
					if !in.IsDelim(']') {
						out.Subject = make([]string, 0, 4)
					} else {
						out.Subject = []string{}
					}
				} else {
					out.Subject = (out.Subject)[:0]
				}
				for !in.IsDelim(']') {
					var v29 string
					v29 = string(in.String())
					out.Subject = append(out.Subject, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				in.Delim('[')
				if out.Description == nil {
					if !in.IsDelim(']') {
						out.Description = make([]string, 0, 4)
					} else {
						out.Description = []string{}
					}
				} else {
					out.Description = (out.Description)[:0]
				}
				for !in.IsDelim(']') {
					var v30 string
					v30 = string(in.String())
					out.Description = append(out.Description, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "publisher":
			if in.IsNull() {
				in.Skip()
				out.Publisher = nil
			} else {
				in.Delim('[')
				if out.Publisher == nil {
					if !in.IsDelim(']') {
						out.Publisher = make([]string, 0, 4)
					} else {
						out.Publisher = []string{}
					}
				} else {
					out.Publisher = (out.Publisher)[:0]
				}
				for !in.IsDelim(']') {
					var v31 string
					v31 = string(in.String())
					out.Publisher = append(out.Publisher, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "contributor":
			if in.IsNull() {
				in.Skip()
				out.Contributor = nil
			} else {
				in.Delim('[')
				if out.Contributor == nil {
					if !in.IsDelim(']') {
						out.Contributor = make([]string, 0, 4)
					} else {
						out.Contributor = []string{}
					}
				} else {
					out.Contributor = (out.Contributor)[:0]
				}
				for !in.IsDelim(']') {
					var v32 string
					v32 = string(in.String())
					out.Contributor = append(out.Contributor, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "date":
			if in.IsNull() {
				in.Skip()
				out.Date = nil
			} else {
				in.Delim('[')
				if out.Date == nil {
					if !in.IsDelim(']') {
						out.Date = make([]string, 0, 4)
					} else {
						out.Date = []string{}
					}
				} else {
					out.Date = (out.Date)[:0]
				}
				for !in.IsDelim(']') {
					var v33 string
					v33 = string(in.String())
					out.Date = append(out.Date, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				in.Delim('[')
				if out.Type == nil {
					if !in.IsDelim(']') {
						out.Type = make([]string, 0, 4)
					} else {
						out.Type = []string{}
					}
				} else {
					out.Type = (out.Type)[:0]
				}
				for !in.IsDelim(']') {
					var v34 string
					v34 = string(in.String())
					out.Type = append(out.Type, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "format":
			if in.IsNull() {
				in.Skip()
				out.Format = nil
			} else {
				in.Delim('[')
				if out.Format == nil {
					if !in.IsDelim(']') {
						out.Format = make([]string, 0, 4)
					} else {
						out.Format = []string{}
					}
				} else {
					out.Format = (out.Format)[:0]
				}
				for !in.IsDelim(']') {
					var v35 string
					v35 = string(in.String())
					out.Format = append(out.Format, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "identifier":
			if in.IsNull() {
				in.Skip()
				out.Identifier = nil
			} else {
				in.Delim('[')
				if out.Identifier == nil {
					if !in.IsDelim(']') {
						out.Identifier = make([]string, 0, 4)
					} else {
						out.Identifier = []string{}
					}
				} else {
					out.Identifier = (out.Identifier)[:0]
				}
				for !in.IsDelim(']') {
					var v36 string
					v36 = string(in.String())
					out.Identifier = append(out.Identifier, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "source":
			if in.IsNull() {
				in.Skip()
				out.Source = nil
			} else {
				in.Delim('[')
				if out.Source == nil {
					if !in.IsDelim(']') {
						out.Source = make([]string, 0, 4)
					} else {
						out.Source = []string{}
					}
				} else {
					out.Source = (out.Source)[:0]
				}
				for !in.IsDelim(']') {
					var v37 string
					v37 = string(in.String())
					out.Source = append(out.Source, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "language":
			if in.IsNull() {
				in.Skip()
				out.Language = nil
			} else {
				in.Delim('[')
				if out.Language == nil {
					if !in.IsDelim(']') {
						out.Language = make([]string, 0, 4)
					} else {
						out.Language = []string{}
					}
				} else {
					out.Language = (out.Language)[:0]
				}
				for !in.IsDelim(']') {
					var v38 string
					v38 = string(in.String())
					out.Language = append(out.Language, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "relation":
			if in.IsNull() {
				in.Skip()
				out.Relation = nil
			} else {
				in.Delim('[')
				if out.Relation == nil {
					if !in.IsDelim(']') {
						out.Relation = make([]string, 0, 4)
					} else {
						out.Relation = []string{}
					}
				} else {
					out.Relation = (out.Relation)[:0]
				}
				for !in.IsDelim(']') {
					var v39 string
					v39 = string(in.String())
					out.Relation = append(out.Relation, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "coverage":
			if in.IsNull() {
				in.Skip()
				out.Coverage = nil
			} else {
				in.Delim('[')
				if out.Coverage == nil {
					if !in.IsDelim(']') {
						out.Coverage = make([]string, 0, 4)
					} else {
						out.Coverage = []string{}
					}
				} else {
					out.Coverage = (out.Coverage)[:0]
				}
				for !in.IsDelim(']') {
					var v40 string
					v40 = string(in.String())
					out.Coverage = append(out.Coverage, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "rights":
			if in.IsNull() {
				in.Skip()
				out.Rights = nil
			} else {
				in.Delim('[')
				if out.Rights == nil {
					if !in.IsDelim(']') {
						out.Rights = make([]string, 0, 4)
					} else {
						out.Rights = []string{}
					}
				} else {
					out.Rights = (out.Rights)[:0]
				}
				for !in.IsDelim(']') {
					var v41 string
					v41 = string(in.String())
					out.Rights = append(out.Rights, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEea530c9EncodeGithubComMmcdoleGofeedExtensions(out *jwriter.Writer, in extensions.DublinCoreExtension) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Title) != 0 {
		const prefix string = ",\"title\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v42, v43 := range in.Title {
				if v42 > 0 {
					out.RawByte(',')
				}
				out.String(string(v43))
			}
			out.RawByte(']')
		}
	}
	if len(in.Creator) != 0 {
		const prefix string = ",\"creator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v44, v45 := range in.Creator {
				if v44 > 0 {
					out.RawByte(',')
				}
				out.String(string(v45))
			}
			out.RawByte(']')
		}
	}
	if len(in.Author) != 0 {
		const prefix string = ",\"author\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v46, v47 := range in.Author {
				if v46 > 0 {
					out.RawByte(',')
				}
				out.String(string(v47))
			}
			out.RawByte(']')
		}
	}
	if len(in.Subject) != 0 {
		const prefix string = ",\"subject\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v48, v49 := range in.Subject {
				if v48 > 0 {
					out.RawByte(',')
				}
				out.String(string(v49))
			}
			out.RawByte(']')
		}
	}
	if len(in.Description) != 0 {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v50, v51 := range in.Description {
				if v50 > 0 {
					out.RawByte(',')
				}
				out.String(string(v51))
			}
			out.RawByte(']')
		}
	}
	if len(in.Publisher) != 0 {
		const prefix string = ",\"publisher\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v52, v53 := range in.Publisher {
				if v52 > 0 {
					out.RawByte(',')
				}
				out.String(string(v53))
			}
			out.RawByte(']')
		}
	}
	if len(in.Contributor) != 0 {
		const prefix string = ",\"contributor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v54, v55 := range in.Contributor {
				if v54 > 0 {
					out.RawByte(',')
				}
				out.String(string(v55))
			}
			out.RawByte(']')
		}
	}
	if len(in.Date) != 0 {
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v56, v57 := range in.Date {
				if v56 > 0 {
					out.RawByte(',')
				}
				out.String(string(v57))
			}
			out.RawByte(']')
		}
	}
	if len(in.Type) != 0 {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v58, v59 := range in.Type {
				if v58 > 0 {
					out.RawByte(',')
				}
				out.String(string(v59))
			}
			out.RawByte(']')
		}
	}
	if len(in.Format) != 0 {
		const prefix string = ",\"format\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v60, v61 := range in.Format {
				if v60 > 0 {
					out.RawByte(',')
				}
				out.String(string(v61))
			}
			out.RawByte(']')
		}
	}
	if len(in.Identifier) != 0 {
		const prefix string = ",\"identifier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v62, v63 := range in.Identifier {
				if v62 > 0 {
					out.RawByte(',')
				}
				out.String(string(v63))
			}
			out.RawByte(']')
		}
	}
	if len(in.Source) != 0 {
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v64, v65 := range in.Source {
				if v64 > 0 {
					out.RawByte(',')
				}
				out.String(string(v65))
			}
			out.RawByte(']')
		}
	}
	if len(in.Language) != 0 {
		const prefix string = ",\"language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v66, v67 := range in.Language {
				if v66 > 0 {
					out.RawByte(',')
				}
				out.String(string(v67))
			}
			out.RawByte(']')
		}
	}
	if len(in.Relation) != 0 {
		const prefix string = ",\"relation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v68, v69 := range in.Relation {
				if v68 > 0 {
					out.RawByte(',')
				}
				out.String(string(v69))
			}
			out.RawByte(']')
		}
	}
	if len(in.Coverage) != 0 {
		const prefix string = ",\"coverage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v70, v71 := range in.Coverage {
				if v70 > 0 {
					out.RawByte(',')
				}
				out.String(string(v71))
			}
			out.RawByte(']')
		}
	}
	if len(in.Rights) != 0 {
		const prefix string = ",\"rights\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v72, v73 := range in.Rights {
				if v72 > 0 {
					out.RawByte(',')
				}
				out.String(string(v73))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonEea530c9DecodeGithubComMmcdoleGofeed3(in *jlexer.Lexer, out *gofeed.Enclosure) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "length":
			out.Length = string(in.String())
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEea530c9EncodeGithubComMmcdoleGofeed3(out *jwriter.Writer, in gofeed.Enclosure) {
	out.RawByte('{')
	first := true
	_ = first
	if in.URL != "" {
		const prefix string = ",\"url\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	if in.Length != "" {
		const prefix string = ",\"length\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Length))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}
func easyjsonEea530c9DecodeGithubComMmcdoleGofeed2(in *jlexer.Lexer, out *gofeed.Image) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEea530c9EncodeGithubComMmcdoleGofeed2(out *jwriter.Writer, in gofeed.Image) {
	out.RawByte('{')
	first := true
	_ = first
	if in.URL != "" {
		const prefix string = ",\"url\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	out.RawByte('}')
}
func easyjsonEea530c9DecodeGithubComMmcdoleGofeed1(in *jlexer.Lexer, out *gofeed.Person) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEea530c9EncodeGithubComMmcdoleGofeed1(out *jwriter.Writer, in gofeed.Person) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	out.RawByte('}')
}
